@page "/azureprices"
@using CNEH_Web.Services
@using CNEH_Web.Models
@inject AzurePricesService AzurePricesService
@inject SettingsService SettingsService
@inject IJSRuntime JSRuntime

<PageTitle>Azure Prices - Settings</PageTitle>

<h1>Azure Prices - Settings</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Settings</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="currencySelect" class="form-label">Currency:</label>
                    <select id="currencySelect" class="form-select" @bind="selectedCurrency">
                        <option value="USD">US Dollar (USD)</option>
                        <option value="EUR">Euro (EUR)</option>
                    </select>
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label d-block">Regions:</label>
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var region in availableRegions)
                        {
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox"
                                    id="region_@region.Code" 
                                    @bind="region.IsSelected">
                                <label class="form-check-label" for="region_@region.Code">
                                    @region.DisplayName
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-primary" @onclick="ApplySettings">Apply Settings</button>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <label for="serviceFilter" class="form-label">Filter by Service Name:</label>
        <input id="serviceFilter" class="form-control" @bind="serviceFilter" @bind:event="oninput" @onkeyup="FilterServices" placeholder="Type to filter..." />
    </div>

    <div class="mb-3">
        <label for="serviceSelect" class="form-label">Select a service:</label>
        <select id="serviceSelect" class="form-select" @bind="selectedService">
            <option value="">-- Select Service --</option>
            @foreach (var service in filteredServices)
            {
                <option value="@service">@service</option>
            }
        </select>
        <button class="btn btn-primary mt-2" @onclick="LoadPricesForSelectedService">Load Prices</button>
    </div>

    @if (!string.IsNullOrEmpty(selectedService) && prices != null)
    {
        <h3>Prices for @selectedService</h3>
        
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>SKU</th>
                        <th>Meter</th>
                        <th>Region</th>
                        <th>Unit</th>
                        <th>Price</th>
                        <th>Currency</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var price in prices)
                    {
                        <tr>
                            <td>@price.SkuName</td>
                            <td>@price.MeterName</td>
                            <td>@price.ArmRegionName</td>
                            <td>@price.UnitOfMeasure</td>
                            <td>@price.RetailPrice.ToString("F4")</td>
                            <td>@price.CurrencyCode</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private List<string> services = new();
    private List<string> filteredServices = new();
    private string serviceFilter = "";
    private string selectedService = "";
    private IEnumerable<AzurePriceItem>? prices;
    
    // Settings
    private string selectedCurrency = "USD";
    private List<AzureRegion> availableRegions = new List<AzureRegion>
    {
        new AzureRegion("westeurope", "West Europe", true),
        new AzureRegion("northeurope", "North Europe", true),
        new AzureRegion("swedencentral", "Sweden Central", true),
        new AzureRegion("eastus", "East US"),
        new AzureRegion("eastus2", "East US 2"),
        new AzureRegion("westus", "West US"),
        new AzureRegion("westus2", "West US 2"),
        new AzureRegion("centralus", "Central US"),
        new AzureRegion("southcentralus", "South Central US"),
        new AzureRegion("uksouth", "UK South"),
        new AzureRegion("ukwest", "UK West"),
        new AzureRegion("westcentralus", "West Central US"),
        new AzureRegion("japaneast", "Japan East"),
        new AzureRegion("japanwest", "Japan West"),
        new AzureRegion("australiaeast", "Australia East"),
        new AzureRegion("australiasoutheast", "Australia Southeast")
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Load saved settings from cookies
            await LoadSettings();
            
            // Initialize Azure Price Service with settings
            await InitializeAzurePricesWithSettings();
            
            var allServices = await AzurePricesService.GetServiceNamesAsync();
            services = allServices.ToList();
            filteredServices = services;
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading services: {ex.Message}");
            isLoading = false;
        }
    }

    private void FilterServices()
    {
        if (string.IsNullOrWhiteSpace(serviceFilter))
        {
            filteredServices = services;
        }
        else
        {
            filteredServices = services
                .Where(s => s.Contains(serviceFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }    
    
    private async Task LoadPricesForSelectedService()
    {
        if (string.IsNullOrEmpty(selectedService))
        {
            try
            {
                var allPrices = await AzurePricesService.GetAllPricesAsync();
                filteredServices = allPrices.Select(p => p.Key).Distinct().ToList();
                prices = new List<AzurePriceItem>();
                foreach (var servicePrices in allPrices)
                {
                    prices.Concat(servicePrices.Value);
                }
            }catch (Exception ex)
            {
                Console.WriteLine($"Error loading prices: {ex.Message}");
                isLoading = false;
            }
        }else
        {
            try
            {
                isLoading = true;
                prices = await AzurePricesService.GetPricesForServiceAsync(selectedService);
                isLoading = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading prices: {ex.Message}");
                isLoading = false;
            }
        }
    }
    
    /// <summary>
    /// Load settings from cookies
    /// </summary>
    private async Task LoadSettings()
    {
        try
        {
            // Load currency preference
            selectedCurrency = await SettingsService.GetCurrencyPreferenceAsync();
            
            // Load regions preference
            var savedRegions = await SettingsService.GetRegionsPreferenceAsync();
            
            // Update selected regions
            foreach (var region in availableRegions)
            {
                region.IsSelected = savedRegions.Contains(region.Code);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings: {ex.Message}");
        }
    }
    
    /// <summary>
    /// Apply settings and reload data
    /// </summary>
    private async Task ApplySettings()
    {
        try
        {
            isLoading = true;
            
            // Save currency preference
            await SettingsService.SaveCurrencyPreferenceAsync(selectedCurrency);
            
            // Save selected regions
            var selectedRegions = availableRegions
                .Where(r => r.IsSelected)
                .Select(r => r.Code)
                .ToList();
                
            await SettingsService.SaveRegionsPreferenceAsync(selectedRegions);
            
            // Apply settings to AzurePricesService
            await InitializeAzurePricesWithSettings();
            
            // Reload services list
            var allServices = await AzurePricesService.GetServiceNamesAsync();
            services = allServices.ToList();
            filteredServices = services;
            
            // Clear previously selected service and prices
            selectedService = "";
            prices = null;
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying settings: {ex.Message}");
            isLoading = false;
        }
    }
    
    /// <summary>
    /// Initialize Azure Prices Service with current settings
    /// </summary>
    private async Task InitializeAzurePricesWithSettings()
    {
        // Set the currency
        await AzurePricesService.InitializeAsync(selectedCurrency);
        
        // Get selected regions
        var selectedRegions = availableRegions
            .Where(r => r.IsSelected)
            .Select(r => r.Code)
            .ToList();
            
        // Enable region filtering and set the selected regions
        AzurePricesService.SetRegionFiltering(true);
        AzurePricesService.SetConfiguredRegions(selectedRegions);
        
        // Reinitialize with new settings
        await AzurePricesService.InitializeAsync(selectedCurrency);
    }
}
